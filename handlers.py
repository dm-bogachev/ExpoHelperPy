import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from BitrixService import BitrixService
from UserData import UserData
from UserService import UserService
import commands

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if chat_id in user_states and user_states[chat_id].questionnaire_status > 0:
        await handle_user_input(update, context)
        return
    if "–•–æ—á—É –≤–∏–¥–µ–æ" in update.message.text:
        await commands.video_command(update, context)
        return
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
    

async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text
    state = user_states.get(chat_id)
    if not state:
        return

    if state.questionnaire_status == 1:
        state.full_name = text
        state.questionnaire_status += 1
        await context.bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å 2: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX):")
    elif state.questionnaire_status == 2:
        state.phone_number = text
        state.questionnaire_status += 1
        await context.bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å 3: –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
    elif state.questionnaire_status == 3:
        state.email = text
        state.questionnaire_status += 1
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å–∫", callback_data="skip_company")]])
        await context.bot.send_message(
            chat_id,
            "–í–æ–ø—Ä–æ—Å 4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å–∫¬ª:",
            reply_markup=keyboard
        )
    elif state.questionnaire_status == 4:
        if text.lower() != "–ø—Ä–æ–ø—É—Å–∫":
            state.company_name = text
        state.questionnaire_status += 1
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å–∫", callback_data="skip_position")]])
        await context.bot.send_message(
            chat_id,
            "–í–æ–ø—Ä–æ—Å 5: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å–∫¬ª:",
            reply_markup=keyboard
        )
    elif state.questionnaire_status == 5:
        if text.lower() != "–ø—Ä–æ–ø—É—Å–∫":
            state.position = text
        state.questionnaire_status = 0
        await commands.ask_interest_command(update, context)
        #await context.bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!", reply_markup=ReplyKeyboardRemove())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # existing_user = UserService.get_user_by_chat_id(chat_id)
        # if existing_user:
        #     UserService.update_user_from_userdata(state)
        # else:
        #     UserService.add_user_from_userdata(state)
        #await ask_for_waiting(context, chat_id)

async def ask_for_waiting(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    text = (
        "–¢–µ–ø–µ—Ä—å –ø–æ–¥–æ–π–¥–∏—Ç–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∫–∏–Ω–µ–±–æ—Ç–∞ –¥–ª—è —Å—ä—ë–º–∫–∏ –≤–∏–¥–µ–æ!.\n"
    )
    await context.bot.send_message(chat_id, text)

async def ask_to_subscribe(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
  
    text = (
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª:\n"
        "‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ —Ä–æ–±–æ—Ç–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ –ö–µ–π—Å—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —á–∞—Ç."
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/robotics_expert")],
        [InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è / –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω", callback_data="subscribed")]
    ])
    await context.bot.send_message(chat_id, text, reply_markup=keyboard)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query_data = update.callback_query.data
    chat_id = update.callback_query.message.chat_id

    await update.callback_query.answer()

    if query_data == "start_kinebot_questions":
        user_states[chat_id] = UserData(chat_id=chat_id, questionnaire_status=1)
        await context.bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    elif query_data == "skip_company":
        state = user_states.get(chat_id)
        if state:
            state.questionnaire_status += 1
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å–∫", callback_data="skip_position")]])
            await context.bot.send_message(
                chat_id,
                "–í–æ–ø—Ä–æ—Å 5: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å–∫¬ª:",
                reply_markup=keyboard
            )
    elif query_data == "skip_position":
        state = user_states.get(chat_id)
        if state:
            state.questionnaire_status = 0
            logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {state}")
            await commands.ask_interest_command(update, context)
    elif query_data == "subscribed":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
        is_subscribed = await is_user_subscribed(context, chat_id, "@robotics_expert")
        if not is_subscribed:
            await context.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.")
            return
        user = UserService.get_user_by_chat_id(chat_id)
        link = user.video_link
        await context.bot.send_message(chat_id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ: {link}\n" +
                                       "–°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏.")
    elif query_data.startswith("interest_"):
        state = user_states.get(chat_id)
        state.user_interest = query_data
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {state}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = UserService.get_user_by_chat_id(chat_id)
        if existing_user:
            UserService.update_user_from_userdata(state)
        else:
            UserService.add_user_from_userdata(state)
        if query_data in ["interest_active", "interest_considering"]:
            success = BitrixService.send_lead_to_bitrix(state)
            logging.info("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")

        await context.bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –¢–µ–ø–µ—Ä—å –ø–æ–¥–æ–π–¥–∏—Ç–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∫–∏–Ω–µ–±–æ—Ç–∞ –¥–ª—è —Å—ä—ë–º–∫–∏ –≤–∏–¥–µ–æ!")

async def is_user_subscribed(context: ContextTypes.DEFAULT_TYPE, user_id: int, channel_username: str) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id=channel_username, user_id=user_id)
        from telegram.constants import ChatMemberStatus
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER, ChatMemberStatus.LEFT]
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def final_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    text = (
        "ü§ñ –†–∞–¥—ã, —á—Ç–æ –≤—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –Ω–∞—à–∏–º –ö–∏–Ω–µ–±–æ—Ç–æ–º –Ω–∞ —Å—Ç–µ–Ω–¥–µ –ê42!\n"
        " - –ü–æ–≥–æ–≤–æ—Ä–∏—Ç–µ —Å –∏–Ω–∂–µ–Ω–µ—Ä–∞–º–∏ Robowizard\n"
        " - –£–≤–∏–¥—å—Ç–µ live-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Ä–æ–±–æ—Ç–æ–≤\n"
        " - –û–±—Å—É–¥–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n\n"
        "–ñ–¥—ë–º –≤–∞—Å –¥–æ –∫–æ–Ω—Ü–∞ –≤—ã—Å—Ç–∞–≤–∫–∏!"
    )
    await context.bot.send_message(chat_id, text)