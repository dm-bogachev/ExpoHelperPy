import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from UserData import UserData
from UserService import UserService
import commands

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if chat_id in user_states and user_states[chat_id].questionnaire_status > 0:
        await handle_user_input(update, context)
        return
    if "–•–æ—á—É –≤–∏–¥–µ–æ" in update.message.text:
        await commands.video_command(update, context)
        return
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
    

async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text
    state = user_states.get(chat_id)
    if not state:
        return

    if state.questionnaire_status == 1:
        state.full_name = text
        state.questionnaire_status += 1
        await context.bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞).")
    elif state.questionnaire_status == 2:
        state.phone_number = text
        state.questionnaire_status += 1
        await context.bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.")
    elif state.questionnaire_status == 3:
        state.email = text
        state.questionnaire_status += 1
        keyboard = ReplyKeyboardMarkup([[KeyboardButton("–ü—Ä–æ–ø—É—Å–∫")]], resize_keyboard=True)
        await context.bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.", reply_markup=keyboard)
    elif state.questionnaire_status == 4:
        if text.lower() != "–ø—Ä–æ–ø—É—Å–∫":
            state.company_name = text
        state.questionnaire_status += 1
        keyboard = ReplyKeyboardMarkup([[KeyboardButton("–ü—Ä–æ–ø—É—Å–∫")]], resize_keyboard=True)
        await context.bot.send_message(chat_id, "–ö–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ?", reply_markup=keyboard)
    elif state.questionnaire_status == 5:
        if text.lower() != "–ø—Ä–æ–ø—É—Å–∫":
            state.position = text
        state.questionnaire_status = 0
        await context.bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!", reply_markup=ReplyKeyboardRemove())

        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {state}")
        UserService.add_user_from_userdata(state)
        await ask_for_waiting(context, chat_id)

async def ask_for_waiting(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    text = (
        "–¢–µ–ø–µ—Ä—å –ø–æ–¥–æ–π–¥–∏—Ç–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∫–∏–Ω–µ–±–æ—Ç–∞ –¥–ª—è —Å—ä—ë–º–∫–∏ –≤–∏–¥–µ–æ!.\n"
    )
    await context.bot.send_message(chat_id, text)

async def ask_to_subscribe(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    text = (
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª:\n"
        "‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ —Ä–æ–±–æ—Ç–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ –ö–µ–π—Å—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —á–∞—Ç."
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/kawasakiroboticsrus")],
        [InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribed")]
    ])
    await context.bot.send_message(chat_id, text, reply_markup=keyboard)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query_data = update.callback_query.data
    chat_id = update.callback_query.message.chat_id

    await update.callback_query.answer()

    if query_data == "start_kinebot_questions":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        user_states[chat_id] = UserData(chat_id=chat_id, questionnaire_status=1)
        await context.bot.send_message(chat_id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    elif query_data == "subscribed":
        # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è; –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        await context.bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        await commands.ask_interest_command(update, context)
    elif query_data.startswith("interest_"):
        if query_data in ["interest_active", "interest_considering"]:
            response = (
                "–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ 360¬∞ —Å –≤—ã—Å—Ç–∞–≤–∫–∏ \"–ú–µ—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ 2025\"!\n\n"
                "–ù–∞—à–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å—Ç–µ–Ω–¥ (–ê42) –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
            )
        else:
            response = (
                "–í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ 360¬∞ —Å –≤—ã—Å—Ç–∞–≤–∫–∏ \"–ú–µ—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ 2025\"!\n\n"
                "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–æ–±–æ—Ç–∏–∑–∞—Ü–∏–∏, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º."
            )
        await context.bot.send_message(chat_id, response)
        video_path = "Videos/user_253712517.mp4"
        await commands.send_video(update, context, video_path)
        await final_message(context, chat_id)

async def final_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    text = (
        "ü§ñ –†–∞–¥—ã, —á—Ç–æ –≤—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –Ω–∞—à–∏–º –ö–∏–Ω–µ–±–æ—Ç–æ–º –Ω–∞ —Å—Ç–µ–Ω–¥–µ –ê42!\n"
        " - –ü–æ–≥–æ–≤–æ—Ä–∏—Ç–µ —Å –∏–Ω–∂–µ–Ω–µ—Ä–∞–º–∏ Robowizard\n"
        " - –£–≤–∏–¥—å—Ç–µ live-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Ä–æ–±–æ—Ç–æ–≤\n"
        " - –û–±—Å—É–¥–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n\n"
        "–ñ–¥—ë–º –≤–∞—Å –¥–æ –∫–æ–Ω—Ü–∞ –≤—ã—Å—Ç–∞–≤–∫–∏!"
    )
    await context.bot.send_message(chat_id, text)